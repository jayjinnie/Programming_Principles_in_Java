// Model - 카드 놀이하는 참여자의 손에 들고 있는 카드 
public class Hand {
	
	private Card[] hand; 		 // 손에 들고 있는 카드 묶음
	private int number_of_cards; // 손에 들고 있는 카드 장 수
	
	/** Constructor Hand - how_many만큼의 카드를 수용할 수 있는 Card 배열 객체를 만들어 Hand 초기화 
	 * @param how_many - 들 수 있는 카드의 최대 장 수 */
	public Hand(int how_many) {
		hand = new Card[how_many];
	}
	
	/** showHand - 들고 있는 카드를 모두 실행창에 프린트한다.
	 * 			   들고 있는 카드가 없으면 없다고 프린트한다.*/
	public void showHand() {
		if(number_of_cards == 0)
			 System.out.println("들고있는 카드가 없습니다.");
		
		else {
			Card card;
			
			for(int i = 0; i < number_of_cards; i++) {
				 card = hand[i];
				 System.out.println("#" + (i+1) + ": " + card.getSuit() + " " + card.getRank());
			 }
		}
	}
	
	/** receiveCard - 카드를 한장 받는다. 한도(배열 Hand의 크기)를 초과하면 받을 수 없다.
	 * @param c - 받을 카드
	 * @return - 성공적으로 받으면 true, 실패하면 false */
	public boolean receiveCard(Card c) {
		if(number_of_cards < hand.length) {
		hand[number_of_cards] = c;
		number_of_cards += 1;
		return true;
		}
		else 
			return false;
	}
	
	/** removeCard - 들고 있는 카드 중에서 무작위로 한 장을 버린다. 
	 * @return - 선택한 카드를 리턴, 손에 들고 있는 카드가 없으면 null */
	public Card removeCard() {
		if(number_of_cards > 0) {
			int picked = (int)(Math.random() * number_of_cards);
			Card card_to_remove = hand[picked];
			
			// 마지막 순서 외의 카드를 버리는 경우 -> 한 칸씩 앞으로 옮기기
			if(number_of_cards - 1 > picked) {
				for(int i = picked + 1; i < number_of_cards; i++)
					hand[i-1] = hand[i];
			}
			number_of_cards -= 1;
			return card_to_remove;
		}
		else
			return null;
	}
	
	/** 테스트 메소드 */
//	public static void main(String[] args) {
//		Hand hand = new Hand(2);
//		CardDeck deck = new CardDeck();
//
//		Card c1 = deck.newCard();
//		hand.receiveCard(c1);
//		
//		Card c2 = deck.newCard();
//		if(hand.receiveCard(c2))
//			hand.showHand();
//		
//		// 정해진 장 수를 초과: return null
//		Card c3 = deck.newCard(); 
//		if(hand.receiveCard(c3))
//			hand.showHand();
//		
//		hand.removeCard();
//		hand.showHand();
//	}
}
